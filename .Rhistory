states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_crop(sf%>%filter(col == "Present"))-> sf_pres
sf_fill <- sf_gradient_fill(sf,sf_pres)
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill%>%st_crop(.,sf),aes(fill = col))
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(25))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_crop(sf%>%filter(col == "Present"))-> sf_pres
ggplot()+
geom_sf(data = sf)+
geom_sf(data = sf_pres%>%st_crop(.,sf),aes(fill = col))
ggplot()+
geom_sf(data = sf)+
geom_sf(data = sf_pres%>%st_crop(.,sf))
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_crop(.,sf%>%filter(col == "Present"))-> sf_pres
ggplot()+
geom_sf(data = sf)+
geom_sf(data = sf_pres%>%st_crop(.,sf))
ggplot()+
geom_sf(data = sf%>%filter(col == "Present"))
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_crop(sf%>%filter(col == "Present"),.)-> sf_pres
ggplot()+
geom_sf(data = sf)+
geom_sf(data = sf_pres%>%st_crop(.,sf))
ggplot()+
geom_sf(data = sf_pres%>%st_crop(.,sf))
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_crop(.,sf%>%filter(col == "Present"))-> sf_pres
ggplot()+
geom_sf(data = sf_pres%>%st_crop(.,sf))
ggplot()+
geom_sf(data = sf_pres)
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_crop(sf%>%filter(col == "Present"))-> sf_pres
ggplot()+
geom_sf(data = sf_pres)
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_filter(, sf%>%filter(col == "Present"), .pred = st_intersects)-> sf_pres
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_filter(sf%>%filter(col == "Present"), .pred = st_intersects)-> sf_pres
ggplot()+
geom_sf(data = sf_pres)
sf_fill <- sf_gradient_fill(sf,sf_pres)
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill%>%st_crop(.,sf),aes(fill = col))
p<- p+geom_sf(data = sf_fill,aes(fill = col))
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_filter(sf%>%filter(col == "Present"), .pred = st_intersects)-> sf_pres
sf_fill <- sf_gradient_fill(sf,sf_pres)
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill,aes(fill = col))
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
p<- p+geom_sf(data = sf_fill%>%st_crop(sf),aes(fill = col))
p
p<- p+geom_sf(data = sf_fill%>%st_crop(.,sf),aes(fill = col))
p
p<- p+geom_sf(data = sf_fill%>%st_crop(sf),aes(fill = col))
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill%>%st_crop(sf),aes(fill = col))
p
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill%>%st_crop(sf%>%filter(col == "Present")),aes(fill = col))
p
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill%>%st_crop(.,sf%>%filter(col == "Present")),aes(fill = col))
p
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill%>%st_filter(sf%>%filter(col == "Present"), .pred = st_intersects),aes(fill = col))
p
p<- p+geom_sf(data = sf_fill,aes(fill = col))
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill,aes(fill = col))
p
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_filter(sf%>%filter(col == "Present"), .pred = st_intersects)-> sf_pres
sf_fill <- sf_gradient_fill(sf,sf_pres)
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill,aes(fill = col))
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .1, square = FALSE, what = "polygons")%>%
st_sf()%>%
st_filter(sf%>%filter(col == "Present"), .pred = st_intersects)-> sf_pres
sf_fill <- sf_gradient_fill(sf%>%
filter(col == "Present"),sf_pres)
p <- ggplot(data = sf)+
geom_sf(fill ='white')+
geom_sf_label(aes(label = state))
p<- p+geom_sf(data = sf_fill,aes(fill = col))
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
stack(c("a","b"))
stack(c(a="a",a="b"))
stack(c(a="a",b="b"))
devtools::document()
read_file("Outputs/RASP_Squamate_DEC_results.txt")
read_file("F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")
text <- read_file("F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")
text <- read_file("F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt", sep = "\t")
text <- read_delim("F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt", sep = "\t")
text <- read_delim("F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")
?read_delim
text <- read_delim(delim ="\t", "F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")
text <- read_delim(delim ="\r", "F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")
View(text)
row_number(text[which("[TAXON]")])
row_number(text[which("[TAXON]"),])
row_number(text["[TAXON]",])
row_number(text["[TAXON]",])
text["[TAXON]",]
row_number(text["[TAXON]"])
rownames(text["[TAXON]"])
rownames(text["[TAXON]",])
rownames(text["[TAXON]",])%>%as.numeric()
View(text)
rownames(text["[TREE]",])%>%as.numeric()
which(text["[TREE",])
which(text== "[TREE]")
View(text)
which(text== "[RESULT]")
tree <- text[p_pos:r_pos,]
t_pos <- which(text== "[TAXON]")
p_pos <- which(text== "[TREE]")
r_pos <- which(text== "[RESULT]")
tree <- text[p_pos:r_pos,]
View(tree)
tree <- text[p_pos+1:r_pos-1,]
View(tree)
tree <- text[p_pos+1,]
View(tree)
text <- read_delim(delim ="\r", "F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")[,-2]
tree <- text[p_pos+1,]
View(tree)
tree <- text[p_pos+1,]%>%as.phylo()
tree <- text[p_pos+1,]%>%as.phylo(.[1])
tree <- text[p_pos+1,]%>%ape::as.phylo(.[1])
tree <- text[p_pos+1,]%>%as.vector
tree <- text[p_pos+1,]
tree <- text[p_pos+1,1]
tree <- text[p_pos+1,]%>%pull()
tree <- text[p_pos+1,]%>%pull()%>%ape::as.phylo()
tree <- text[p_pos+1,]%>%pull()%>%ape::read.tree()
tree <- text[p_pos+1,]%>%pull()%>%ape::read.tree(.)
tree <- text[p_pos+1,]%>%pull()%>%ape::read.tree(text = .)
plot(tree)
taxon <- text[t_pos+1:p_pos-1,]
View(taxon)
taxon <- text[t_pos:p_pos-1,]
taxon <- text[(t_pos+1):p_pos-1,]
View(taxon)
taxon <- text[(t_pos+3):p_pos-1,]
View(taxon)
taxon <- text[(t_pos+2):p_pos-2,]
View(taxon)
taxon <- text[t_pos+2:p_pos-2,]
taxon <- text[t_pos+3:p_pos-2,]
taxa <- text[t_pos+3:p_pos-2,]%>%str_split_fixed(.," ")
taxa <- text[t_pos+3:p_pos-2,]%>%str_split_fixed(.," ",3)
taxa <- text[t_pos+3:p_pos-2,]%>%separate()
taxa <- text[t_pos+3:p_pos-2,]%>%separate(sep = " ")
taxa <- text[t_pos+3:p_pos-2,]%>%separate(sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%separate(.,sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%separate(.[,1],sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%separate(.[,1],sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%separate(colname(.[,1]),sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%separate(colnames(.[,1]),sep = " ",col = c("tip","taxa","state"))
colnames(taxon)
taxa <- text[t_pos+3:p_pos-2,]%>%separate(colnames(taxon),sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%str_split(colnames(taxon),sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%str_split(sep = " ",col = c("tip","taxa","state"))
taxa <- text[t_pos+3:p_pos-2,]%>%str_split(sep = " ")
?str_split
taxa <- text[t_pos+3:p_pos-2,]%>%str_split(" ")
View(taxa)
taxa <- text[t_pos+3:p_pos-2,]%>%str_split(.[,1]," ")
taxa <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split(" ")
taxa <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split_fixed(" ")
taxa <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split_fixed(" ",n = 3)
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split_fixed(" ",n = 3)
text[t_pos+3:p_pos-2,]
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split_fixed("\",n = 3)
tree <- text[p_pos+1,]%>%pull()%>%ape::read.tree(text = .)
colnames(taxon)
?str_split
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split_fixed("\",n = 3)
tree <- text[p_pos+1,]%>%pull()%>%ape::read.tree(text = .)
colnames(taxon)
?str_split
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%pull()%>%str_split_fixed("\\",n = 3)
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%str_split_fixed("\\",n = 3)
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%str_split_fixed("\t",n = 3)
taxa[c("tip","taxa","state")] <- text[t_pos+3:p_pos-2,]%>%str_split("\t")
text[t_pos+3:p_pos-2,]
text[t_pos+3:p_pos-2,]%>%str_split("\\")
text[t_pos+3:p_pos-2,]%>%str_split("\\\\")
text[t_pos+3:p_pos-2,]%>%str_split("\t")
text[t_pos+3:p_pos-2,]
text[t_pos+3:p_pos-2,]%>%str_split("\\t")
text[t_pos+3:p_pos-2,]%>%gsub("//t","-",.)
text[t_pos+3:p_pos-2,]%>%gsub("/\t","-",.)
text[t_pos+3:p_pos-2,]%>%gsub("\t","-",.)
text[t_pos+3:p_pos-2,]%>%gsub("\\t","-",.)
text[t_pos+3:p_pos-2,]%>%gsub("\\t\","-",.)
str_split("\\t")
text[t_pos+3:p_pos-2,]%>%gsub("\\t\\","-",.)
text <- read_delim(delim ="\t", "F:/My Drive/OneDrive/Research/Phyloregion_SDSU/Phyloregionalization_MA/Outputs/RASP_Squamate_DEC_results.txt")[,-2]
text[t_pos+3:p_pos-2,]%>%gsub("\t+","-",.)
text[t_pos+3:p_pos-2,]%>%gsub("[\t]","-",.)
text[t_pos+3:p_pos-2,]%>%gsub("[\\t]","-",.)
text[t_pos+3:p_pos-2,]%>%str_split(.,"[\\t]")
text[t_pos+3:p_pos-2,]%>%str_split_fixed(.,"[\\t]", n = 3)
text[t_pos+3:p_pos-2,]%>%str_split_fixed(.,"\[\\t]", n = 3)
text[t_pos+3:p_pos-2,]%>%separate(.,sep = "\[\\t]")
text[t_pos+3:p_pos-2,]%>%separate(.,sep = "[\\t]")
text[t_pos+3:p_pos-2,]
text[t_pos+3:p_pos-2,]%>%str_split(.,sep = "[\\t]")
text[t_pos+3:p_pos-2,]%>%str_split(.,"[\\t]")
text[t_pos+3:p_pos-2,]%>%str_split(.,"[\\t]",fixed = TRUE)
text[t_pos+3:p_pos-2,]%>%strsplit(.,"[\\t]",fixed = TRUE)
text[t_pos+3:p_pos-2,]%>%strsplit("[\\t]",fixed = TRUE)
text[t_pos+3:p_pos-2,]%>%strsplit(as.character(.),"[\\t]",fixed = TRUE)
strsplit(as.character(text[t_pos+3:p_pos-2,1]),"[\\t]",fixed = TRUE)
do.call("rbind",strsplit(as.character(text[t_pos+3:p_pos-2,1]),"[\\t]",fixed = TRUE))
do.call("rbind",strsplit(as.character(text[t_pos+3:p_pos-2,1]),"\\t",fixed = TRUE))
separate(data = text[t_pos+3:p_pos-2,1], col = colnames(text[t_pos+3:p_pos-2,1]), sep = '\\t')
separate(data = text[t_pos+3:p_pos-2,1],
col = colnames(text[t_pos+3:p_pos-2,1]),
sep = '\\t',
into = c("tip",'species','state'))
taxa <- separate(data = text[t_pos+3:p_pos-2,1],
col = colnames(text[t_pos+3:p_pos-2,1]),
sep = '\\t',
into = c("tip",'species','state'))%>%as.data.frame()
View(taxa)
text[p_pos+1:r_pos-2,1]
text[p_pos+1:r_pos,1]
text[r_pos+1:,1]
text[r_pos+1:nrow(text),1]
text[r_pos+2:nrow(text),1]
