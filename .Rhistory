ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data[which('node' == input$node),"ML_state"]%>%
str_split(.,"")
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_list)
states_filt <- gg_phylo$data[which('node' == 1),"ML_state"]%>%
str_split(.,"")
states_filt <- gg_phylo$data[which('node' == 1),"ML_state"]%>%
str_split(.,"")
states_filt <- gg_phylo$data[which('node' == 1),"ML_state"]
states_filt <- gg_phylo$data[which(node == 1),"ML_state"]
states_filt <- gg_phylo$data%>%
filter(node == 1)
vis_acr_shiny <- function(phylo, sf, state_list, ML = TRUE){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
state_df <- ASR_list_2_df(states, ML = ML)
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == input$node)%>% pull(ML_state)%>%
str_split(.,"")
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_list)
vis_acr_shiny <- function(phylo, sf, state_list, ML = TRUE){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
state_df <- ASR_list_2_df(states, ML = ML)
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_list)
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(27))%>% pull(ML_state)%>%
str_split(.,"")
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(27))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))+
scale_fill_gradientn(colours = terrain.colors(3))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))+
scale_fill_gradientn(name = "regions", colours = terrain.colors(3))
vis_acr_shiny <- function(phylo, sf, state_df){
#Load required packages
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
#blank states
states_filt = ""
#call ASR_list_2_df to convert a list of dataframes to a single dataframe
gg_phylo<-ggtree(phylo)%<+% state_df
# UI ####
ui <- fluidPage(
# Application title
title("ASE Visualizer"),
hr(),
selectInput('node',"Node Number:",gg_phylo$data$node),
hr(),
fluidRow(column(7,
plotlyOutput("phylo")),
column(5,
plotOutput('state'))
)
)
# Server ####
server <- function(input, output) {
output$phylo <- renderPlotly({
p2 <- gg_phylo +
geom_point(aes(x = x,
y = y,
colour = ML_state,
label = node))
plotly::ggplotly(p2, tooltip = c('node','ML_state'))
})
states <- reactive({
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
p <- ggplot(data = sf)+
geom_sf(aes(fill = col))+
geom_sf_label(aes(label = state))+
scale_fill_gradientn(name = "regions", colours = terrain.colors(3))
p
return(p)
})
output$state <- renderPlot({
states()
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
vis_acr_shiny(phylo, regions, state_df)
sf::st_bbox(regions)
sf%>%filter(col == "present")
sf <- regions
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "present")%>%
raster(vals = 0, resolution = c(.5,.5),ext = st_bbox(sf)) -> ras
sf%>%
filter(col == "present")%>%
raster::raster(vals = 0, resolution = c(.5,.5),ext = st_bbox(sf)) -> ras
sf%>%
filter(col == "present")%>%
raster::raster( resolution = c(.1,.1),ext = st_bbox(sf)) -> ras
sf%>%
filter(col == "present")%>%
raster::raster( resolution = c(.1,.1)) -> ras
sf%>%
filter(col == "present")
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(input$node))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
states_filt <- gg_phylo$data%>%
filter(node == as.numeric(5))%>% pull(ML_state)%>%
str_split(.,"")%>%unlist()
reg <- st_drop_geometry(sf)
for(i in 1:nrow(reg)){
if(reg[i,"state"] %in% states_filt){
reg[i,"col"] = "Present"
}else{
reg[i,"col"] = "Not Present"}
}
sf$col = reg$col
sf%>%
filter(col == "Present")%>%
raster::raster( resolution = c(.1,.1)) -> ras
sf%>%
filter(col == "Present")%>%
raster::raster( resolution = c(.1,.1),ext = st_bbox(sf)) -> ras
sf%>%
filter(col == "Present")%>%
raster::raster( resolution = c(.1,.1),ext = st_bbox(sf$geometry)) -> ras
st_bbox(sf$geometry)
st_bbox(sf)
ext <- c(st_bbox(sf)[1],
st_bbox(sf)[2],
st_bbox(sf)[3],
st_bbox(sf)[4])
sf%>%
filter(col == "Present")%>%
raster::raster( resolution = c(.1,.1),ext = ext) -> ras
sf%>%
filter(col == "Present")%>%
raster::raster( resolution = c(.1,.1),ext = st_bbox(sf)) -> ras
sf%>%st_make_grid(.,cellsize = .5)
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .5) -> sf_pres
p <- ggplot(data = sf)+
geom_sf(data = sf_pres, aes(fill = col))+
geom_sf_label(aes(label = state))+
scale_fill_gradientn(name = "regions", colours = terrain.colors(3))
p
sf%>%
filter(col == "Present")%>%
st_make_grid(.,cellsize = .5) -> sf_pres
sf%>%
#filter(col == "Present")%>%
st_make_grid(.,cellsize = .5) -> sf_pres
sf%>%
#filter(col == "Present")%>%
st_make_grid(.,cellsize = .5, square = FALSE) -> sf_pres
p <- ggplot(data = sf)+
geom_sf(data = sf_pres, aes(fill = num))+
geom_sf_label(aes(label = state))+
scale_fill_gradientn(name = "regions", colours = terrain.colors(3))
p
