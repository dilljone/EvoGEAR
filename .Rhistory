points_clean_kde <- rbind(points_clean_kde,points_merge)
next
}else{
win <- extent(matrix(c(points_$decimallongitude,points_$decimallatitude), nrow = nrow(points_)))
win <- data.frame(c(win@xmin, win@xmax),
c(win@ymin, win@ymax))
win <- owin(c(win[1,1],win[2,1]),c(win[1,2],win[2,2]))
#create ppm
gbif_ppp <- ppp(points_$decimallongitude,points_$decimallatitude, window = win)
#KDE
gbif_kde <- density.ppp(gbif_ppp, at = "points")
gbif_kde <- data.frame(gbif_kde, gbif_ppp$x,gbif_ppp$y)
#Exclude Outliers
q <- quantile(gbif_kde$gbif_kde, probs = c(low_r,up_r))
iqr <- IQR(gbif_kde$gbif_kde)
uq <- q[2] + (iqr * 1.5)
lq <- q[1] - (iqr * 1.5)
gbif_kde <- gbif_kde[gbif_kde$gbif_kde <= uq,]
gbif_kde <- gbif_kde[gbif_kde$gbif_kde >= lq,]
nrow(gbif_kde)
if(nrow(gbif_kde)<=1){
print(paste(points_[1,1], " removed following filtering "))
points_merge <- data.frame('species' = points_[1,1],
'x' = points_$decimallongitude, 'y'= points_$decimallatitude,
"KDE_status" = "Removed_KDE_RemovedAll")
points_clean_kde <- rbind(points_clean_kde,points_merge)
next
}else{
print(paste('Adding ',points_[1,1]))
points_merge <- data.frame('species' = points_[1,1],
'x' = gbif_kde$gbif_ppp.x, 'y'= gbif_kde$gbif_ppp.y,
"KDE_status" = "Filter_Successful")
points_clean_kde <- rbind(points_clean_kde,points_merge)
}
}
}
}
return(points_clean_kde)
}
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
gbif <- clean_gbif(.)%>%
KDE_filter(., FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
gbif <- clean_gbif(.)%>%
KDE_filter(., FALSE)
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
gbif <- clean_gbif(gbif_raw)%>%
KDE_filter(., FALSE)
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
gbif_1 <- clean_gbif(gbif_raw)
df_kde <- data.frame(species = gbif_raw$species,
decimallongitude = gbif_raw$decimallongitude,
decimallatitude = gbif_raw$decimallatitude)
df_kde <- data.frame(species = gbif_1$species,
decimallongitude = gbif_1$decimallongitude,
decimallatitude = gbif_1$decimallatitude)
gbif_2 <- KDE_filter(gbif_1,FALSE)
View(df_kde)
?KDE_filter
###CLeaning Data with KDE####
KDE_filter <- function(points, unispecies = TRUE, low_r = .25, up_r = .75, rec_min = 5){
###Clean using Kernel Density Estimates according to gomez 2018####
require(spatstat)
require(tidyverse)
require(raster)
if(unispecies == TRUE){
#points_clean_kde = data.frame(x,y)
win <- extent(matrix(c(points$decimallongitude,points$decimallatitude), nrow = nrow(points)))
win <- data.frame(c(win@xmin, win@xmax),
c(win@ymin, win@ymax))
win <- owin(c(win[1,1],win[2,1]),c(win[1,2],win[2,2]))
#create ppm
gbif_ppp <- ppp(points$decimallongitude,points$decimallatitude, window = win)
#KDE
gbif_kde <- density.ppp(gbif_ppp, at = "points")
gbif_kde <- data.frame(gbif_kde, gbif_ppp$x,gbif_ppp$y)
#Exclude Outliers
q <- quantile(gbif_kde$gbif_kde, probs = c(low_r,up_r))
iqr <- IQR(gbif_kde$gbif_kde)
uq <- q[1] + iqr
lq <- q[2] - iqr
gbif_kde <- gbif_kde[gbif_kde$gbif_kde <= uq,]
gbif_kde <- gbif_kde[gbif_kde$gbif_kde >= lq,]
}else{
points_clean_kde = data.frame("species" = as.character(),
'x' = as.numeric(),
'y' = as.numeric(),
"KDE_status" = as.character())
for (i in seq_along(levels(factor(points[,1])))){
print(i)
points_ <- subset(points, points[,1] == levels(factor(points[,1]))[i])
if(nrow(points_)<= rec_min){
print(paste("Removing ", points_[1,1], " due to fewer than ", recmin, " records"))
points_merge <- data.frame('species' = points_[1,1],
'x' = points_$decimallongitude, 'y'= points_$decimallatitude,
"KDE_status" = "Removed_tooFewRecords")
points_clean_kde <- rbind(points_clean_kde,points_merge)
next
}else{
win <- extent(matrix(c(points_$decimallongitude,points_$decimallatitude), nrow = nrow(points_)))
win <- data.frame(c(win@xmin, win@xmax),
c(win@ymin, win@ymax))
win <- owin(c(win[1,1],win[2,1]),c(win[1,2],win[2,2]))
#create ppm
gbif_ppp <- ppp(points_$decimallongitude,points_$decimallatitude, window = win)
#KDE
gbif_kde <- density.ppp(gbif_ppp, at = "points")
gbif_kde <- data.frame(gbif_kde, gbif_ppp$x,gbif_ppp$y)
#Exclude Outliers
q <- quantile(gbif_kde$gbif_kde, probs = c(low_r,up_r))
iqr <- IQR(gbif_kde$gbif_kde)
uq <- q[2] + (iqr * 1.5)
lq <- q[1] - (iqr * 1.5)
gbif_kde <- gbif_kde[gbif_kde$gbif_kde <= uq,]
gbif_kde <- gbif_kde[gbif_kde$gbif_kde >= lq,]
nrow(gbif_kde)
if(nrow(gbif_kde)<=1){
print(paste(points_[1,1], " removed following filtering "))
points_merge <- data.frame('species' = points_[1,1],
'x' = points_$decimallongitude, 'y'= points_$decimallatitude,
"KDE_status" = "Removed_KDE_RemovedAll")
points_clean_kde <- rbind(points_clean_kde,points_merge)
next
}else{
print(paste('Adding ',points_[1,1]))
points_merge <- data.frame('species' = points_[1,1],
'x' = gbif_kde$gbif_ppp.x, 'y'= gbif_kde$gbif_ppp.y,
"KDE_status" = "Filter_Successful")
points_clean_kde <- rbind(points_clean_kde,points_merge)
}
}
}
}
return(points_clean_kde)
}
gbif_2 <- KDE_filter(gbif_1,FALSE, rec_min = 1)
###CLeaning Data with KDE####
KDE_filter <- function(points, unispecies = TRUE, low_r = .25, up_r = .75, rec_min = 5){
###Clean using Kernel Density Estimates according to gomez 2018####
require(spatstat)
require(tidyverse)
require(raster)
if(unispecies == TRUE){
#points_clean_kde = data.frame(x,y)
win <- extent(matrix(c(points$decimallongitude,points$decimallatitude), nrow = nrow(points)))
win <- data.frame(c(win@xmin, win@xmax),
c(win@ymin, win@ymax))
win <- owin(c(win[1,1],win[2,1]),c(win[1,2],win[2,2]))
#create ppm
gbif_ppp <- ppp(points$decimallongitude,points$decimallatitude, window = win)
#KDE
gbif_kde <- density.ppp(gbif_ppp, at = "points")
gbif_kde <- data.frame(gbif_kde, gbif_ppp$x,gbif_ppp$y)
#Exclude Outliers
q <- quantile(gbif_kde$gbif_kde, probs = c(low_r,up_r))
iqr <- IQR(gbif_kde$gbif_kde)
uq <- q[1] + iqr
lq <- q[2] - iqr
gbif_kde <- gbif_kde[gbif_kde$gbif_kde <= uq,]
gbif_kde <- gbif_kde[gbif_kde$gbif_kde >= lq,]
}else{
points_clean_kde = data.frame("species" = as.character(),
'x' = as.numeric(),
'y' = as.numeric(),
"KDE_status" = as.character())
for (i in seq_along(levels(factor(points[,1])))){
print(i)
points_ <- subset(points, points[,1] == levels(factor(points[,1]))[i])
if(nrow(points_)<= rec_min){
print(paste("Removing ", points_[1,1], " due to fewer than ", rec_min, " records"))
points_merge <- data.frame('species' = points_[1,1],
'x' = points_$decimallongitude, 'y'= points_$decimallatitude,
"KDE_status" = "Removed_tooFewRecords")
points_clean_kde <- rbind(points_clean_kde,points_merge)
next
}else{
win <- extent(matrix(c(points_$decimallongitude,points_$decimallatitude), nrow = nrow(points_)))
win <- data.frame(c(win@xmin, win@xmax),
c(win@ymin, win@ymax))
win <- owin(c(win[1,1],win[2,1]),c(win[1,2],win[2,2]))
#create ppm
gbif_ppp <- ppp(points_$decimallongitude,points_$decimallatitude, window = win)
#KDE
gbif_kde <- density.ppp(gbif_ppp, at = "points")
gbif_kde <- data.frame(gbif_kde, gbif_ppp$x,gbif_ppp$y)
#Exclude Outliers
q <- quantile(gbif_kde$gbif_kde, probs = c(low_r,up_r))
iqr <- IQR(gbif_kde$gbif_kde)
uq <- q[2] + (iqr * 1.5)
lq <- q[1] - (iqr * 1.5)
gbif_kde <- gbif_kde[gbif_kde$gbif_kde <= uq,]
gbif_kde <- gbif_kde[gbif_kde$gbif_kde >= lq,]
nrow(gbif_kde)
if(nrow(gbif_kde)<=1){
print(paste(points_[1,1], " removed following filtering "))
points_merge <- data.frame('species' = points_[1,1],
'x' = points_$decimallongitude, 'y'= points_$decimallatitude,
"KDE_status" = "Removed_KDE_RemovedAll")
points_clean_kde <- rbind(points_clean_kde,points_merge)
next
}else{
print(paste('Adding ',points_[1,1]))
points_merge <- data.frame('species' = points_[1,1],
'x' = gbif_kde$gbif_ppp.x, 'y'= gbif_kde$gbif_ppp.y,
"KDE_status" = "Filter_Successful")
points_clean_kde <- rbind(points_clean_kde,points_merge)
}
}
}
}
return(points_clean_kde)
}
gbif_2 <- KDE_filter(gbif_1,FALSE, rec_min = 1)
gbif_2 <- KDE_filter(df_kde,FALSE, rec_min = 3)
load_all()
devtools::load_all()
install.packages('devtools')
install.packages("devtools")
library(devtools)
install.packages('cli')
install.packages('cli')
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
rm(list = c("clean_gbif", "KDE_filter", "points2Poly"))
devtools::load_all()
devtools::load_all()
devtools::load_all()
require(raster)
require(alphahull)
require(dismo)
require(rangeBuilder)
#'Create circles around points and/or alpha polygons(NEED TO TEST)
#'
#'Points as a dataframe with columns species, x, and y
#'map created from map function (used to crop the circles to a landmass)
#'
#'
rm(list = all())
#'Create circles around points and/or alpha polygons(NEED TO TEST)
#'
#'Points as a dataframe with columns species, x, and y
#'map created from map function (used to crop the circles to a landmass)
#'
#'
data("gbif")
#'Create circles around points and/or alpha polygons(NEED TO TEST)
#'
#'Points as a dataframe with columns species, x, and y
#'map created from map function (used to crop the circles to a landmass)
#'
#'
data("gbif", gbif)
#'Create circles around points and/or alpha polygons(NEED TO TEST)
#'
#'Points as a dataframe with columns species, x, and y
#'map created from map function (used to crop the circles to a landmass)
#'
#'
data(gbif)
#'Create circles around points and/or alpha polygons(NEED TO TEST)
#'
#'Points as a dataframe with columns species, x, and y
#'map created from map function (used to crop the circles to a landmass)
#'
#'
data("gbif")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
save(gbif_raw, "data/gbif")
save("data/gbif",gbif_raw)
save(gbif_raw)
save(gbif_raw, file = "data/gbif.csv")
save(gbif_raw, file = "data/gbif.Rdata")
load_all()
devtools::load_all()
load_all()
devtools::load_all()
devtools::load_all()
data("gbif")
devtools::load_all()
data("gbif")
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
load('data/gbif.Rdata')
df <- load('data/gbif.Rdata')
load("C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/EcoGeoEvo/EcoGeoEvo/data/gbif.Rdata")
View(gbif_raw)
force(gbif_raw)
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep=",")
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="/t")
df <- load('data/gbif.Rdata')
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="/t")
gbif_raw <- read.delim("data/gbif.csv", header = TRUE, sep="\t")
devtools::document()
devtools::document()
shiny::runApp('C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Simulate_Phylogeography/Union_pay_change')
runApp('C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Simulate_Phylogeography/Union_pay_change')
runApp('C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Simulate_Phylogeography/Union_pay_change')
runApp('C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Simulate_Phylogeography/Union_pay_change')
runApp('C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Simulate_Phylogeography/Union_pay_change')
install.packages("colorspace")
library(colorspace)
pal <- choose_pallete()
pal <- choose_palette()
library(tidyverse)
set.seed(1234) #set seed ensures our distributions are the same every time
fruit_fly_df <- data.frame(
group = rep(c("group_1", "group_2",'group_3'), each = 200),
lifespan_days = c(rnorm(200,7.5,.7),
rnorm(200,9,.6),
rnorm(200,10,.3)),
length_mm =c(rnorm(200,3,2)+1,
rnorm(200,4,1)+1,
rnorm(200,5,2)+1),
eye_color = rep(c("green","red","black","brown"),150),
wing_size = c(sample(c("none","small","normal"),200,
prob = c(.4,.5,.1), replace = TRUE),
sample(c("none","small","normal"),200,
prob = c(.1,.5,.1), replace = TRUE),
sample(c("none","small","normal"),200,
prob = c(.4,.1,.5), replace = TRUE)))
gg <- ggplot(fruit_fly_df,aes(x = length_mm, y = lifespan_days))
gg+geom_point()
gg+geom_point(aes(color = group))
pal <- choose_pallete()
pal <- choose_palette()
gg+geom_point(aes(color = group))
choose_palette()
gg+geom_point(aes(color = group))
gg+geom_point(aes(color = group))+ theme(scale_color_manual(pal))
gg+geom_point(aes(color = group))+ theme(scale_color_manual= pal
)
gg+geom_point(aes(color = group))+ scale_color_manual(pal)
gg+geom_point(aes(color = group))+ scale_color_manual(choose_palette())
gg+geom_point(aes(color = group))+ scale_color_gradient(choose_palette())
gg+geom_point(aes(color = group))+ scale_color_gradient(choose_palette(3))
gg+geom_point(aes(color = group))+ scale_color_manual(choose_palette(3))
gg+geom_point(aes(color = group))+ scale_color_manual(pal(3))
pal <- choose_palette()
gg+geom_point(aes(color = group))+ scale_color_manual(pal(3))
pal(3)
gg+geom_point(aes(color = group))+ scale_color_manual(values = pal(3))
pal <- choose_palette()
gg+geom_point(aes(color = group))+ scale_color_manual(values = pal(3))
devtools::document()
install.packages("processx")
devtools::document()
library(devtools)
install.packages("devtools")
devtools::document()
devtools::document()
install.packages("devtools")
install.packages("devtools")
install.packages("Rtools")
devtools::document()
install.packages('devtools')
devtools::document()
devtools::document()
git fetch
devtools::document()
devtools::document()
phylo <- ape::rtree(n = 20)
ggtree(phylo)
source("~/.active-rstudio-document", echo=TRUE)
require(plotly)
require(ggtree)
require(sf)
require(tidyverse)
require(shiny)
ggtree(phylo)
g <- ggtree(phylo)
View(g)
phylo$node = 1:39
phylo$states = rep(39, data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
?rep
phylo$states = rep(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5),39)
View(phylo)
states <- for(i in 1:39){
data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5),39)}
states <- for(i in 1:39){
data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5)}
states <- for(i in 1:39){
df <- data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5)}
for(i in 1:39){
states[i]
df <- data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5)}
for(i in 1:39){
states[i] <- data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5)}
View(states)
states[i] <- as.list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5))}
for(i in 1:39){
states[i] <- as.list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5))}
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(1:5,5, replace = FALSE)/5))}
phylo$states <- states
phylo[1]
phylo[[1]]
phylo[,1]
phylo$states
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/5))}
phylo$states
phylo$states <- states
phylo[,1]
phylo[1]
phylo$states
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
phylo$states <- states
phylo$states
set.seed(123456)
phylo <- ape::rtree(n = 20)
phylo$node = 1:39
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
set.seed(123456)
phylo <- ape::rtree(n = 20)
phylo$node = 1:39
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
g <- ggtree(phylo)
require(shiny)
require(sf)
require(tidyverse)
require(plotly)
require(ggtree)
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
g <- ggtree(phylo)
state= list()
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
states= list()
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
g <- ggtree(phylo)
set.seed(123456)
phylo <- ape::rtree(n = 20)
phylo$node = 1:39
states= list()
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))}
phylo$states <- states
names(states) <- 1:39
phylo$states <- states
states <- list()
set.seed(123456)
phylo <- ape::rtree(n = 20)
phylo$node = 1:39
states <- list()
for(i in 1:39){
states[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))
names(states) <- 1:39
}
state_list <- list()
for(i in 1:39){
state_list[i] <- list(data.frame(state = sample(c("A",'B','C','D','AB','AC','AD','BC','BD','CD'),
5, replace = FALSE),
freq = sample(c(1,2,3,4,5),5, replace = FALSE)/15))
names(states) <- 1:39
}
