validateTaxa(species$x[1:20])
taxa <- species$x[1:20]
syntaxa  <- taxize::synonyms(taxa, db = "itis")
View(syntaxa)
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#Enter logic for NA here
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
df_tax = temp
names(df_tax) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax)))}
bool = bool + 1
}else{
#enter logic here
}
}
}
names(df_tax)[6] = 'species'
View(df_tax)
df <- plyr::join(df,df_tax[c(6,2,3),], by = 'species', type='left')
View(df_tax)
View(syntaxa)
syntaxa[["Lithobates catesbeianus"]]
syntaxa[["Hyla versicolor"]][["acc_author"]]
syntaxa[["Hyla versicolor"]]
taxa <- species$x[29]
syntaxa  <- taxize::synonyms(taxa, db = "itis")
View(syntaxa)
names(syntaxa[1])
df_na <- ""
bind(df_na,names(syntaxa[1])
)
bind(df_na,names(syntaxa[1]))
df_na[length(df_na)+1]  <- names(syntaxa[1])
validateTaxa <- function(taxa){
taxa <- species$x[29]
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax = temp
names(df_tax) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax)))}
bool = bool + 1
}else{
#logic for species found
df_syn_temp = temp
names(df_syn_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
validateTaxa(species$x[20:30])
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
df_syn <- data.frame('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax)))}
bool = bool + 1
}else{
#logic for species found
df_syn_temp = temp
names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
validateTaxa(species$x[20:30])
taxa <- species$x[20]
taxa <- species$x[21]
taxa <- species$x[22]
taxa <- species$x[20:30]
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
df_syn <- data.frame('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found
df_syn_temp = temp
names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
df_syn <- data.frame('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found
df_syn_temp = temp
names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
View(df_tax)
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found
df_syn_temp = temp
names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found
df_syn_temp = temp
names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
View(df_syn)
temp <- data.frame(syntaxa[i])
temp <- data.frame(syntaxa[3])
temp <- data.frame(syntaxa[4])
temp <- data.frame(syntaxa[5])
View(syntaxa)
syntaxa  <- taxize::synonyms(taxa, db = "itis")
View(syntaxa)
View(syntaxa)
syntaxa  <- taxize::synonyms(taxa, db = "itis", accepted = TRUE)
taxize
taxize()
synonym()
taxize::synonyms()
taxize::synonyms()
taxize::synonyms
view(taxize::synonyms)
View(taxize::synonyms)
getAnywhere(taxize::synonyms)
methods(taxize::synonyms)
methods(taxize::synonyms.tsn)
methods(taxize::synonyms.tsn*)
getAnywhere(taxize::synonyms.default*)
getAnywhere(taxize::synonyms.default)
?methods
getAnywhere(taxize::synonyms.default)
taxize:::synonyms.default(
)
taxize:::synonyms.default
taxize:::process_syn_ids
?eval
?get_tsn
taxize:::get_tsn
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[5])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found. Currently have logic for correct name but with synonyms. No code present for
#correct name but no synonyms (returns 0col/0row dataframe)
#df_syn_temp = temp
#names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
#df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
out <- validateTaxa(taxa)
View(out)
taxa <- species$x
taxa <- species$x[1:20]
out <- validateTaxa(taxa)
View(out)
View(df_syn)
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found. Currently have logic for correct name but with synonyms. No code present for
#correct name but no synonyms (returns 0col/0row dataframe)
#df_syn_temp = temp
#names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
#df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
out <- validateTaxa(taxa)
View(out)
library(readr)
species_gbif_Iucn <- read_csv("C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Phyloregion_SDSU/Phyloregionalization_MA/species_gbif_Iucn.csv")
View(species_gbif_Iucn)
taxa <- species$x
taxa <- unique(species$x)
taxa <- unique(species_gbif_Iucn$x)
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis")
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found. Currently have logic for correct name but with synonyms. No code present for
#correct name but no synonyms (returns 0col/0row dataframe)
#df_syn_temp = temp
#names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
#df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
out <- validateTaxa(taxa)
View(out)
out[[2]]
library(readr)
phylo_species <- read_csv("C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/Phyloregion_SDSU/Phyloregionalization_MA/phylo_species.csv")
View(phylo_species)
??taxize::synonyms
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "itis", rows = 1)
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found. Currently have logic for correct name but with synonyms. No code present for
#correct name but no synonyms (returns 0col/0row dataframe)
#df_syn_temp = temp
#names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
#df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
View(phylo_species)
out_phylo <- validateTaxa(phylo_species$x)
out_phylo_0_1k <- validateTaxa(phylo_species$x[1:1000])
out_phylo_1_2k <- validateTaxa(phylo_species$x[1001:2000])
out_phylo_2_3k <- validateTaxa(phylo_species$x[2001:3000])
out_phylo_3_4k <- validateTaxa(phylo_species$x[3001:4000])
out_phylo_4_5k <- validateTaxa(phylo_species$x[4001:5000])
out_phylo_5_6k <- validateTaxa(phylo_species$x[5001:6000])
out_phylo_6_7k <- validateTaxa(phylo_species$x[6001:7000])
out_phylo_7_8k <- validateTaxa(phylo_species$x[7001:8000])
out_phylo_8_9k <- validateTaxa(phylo_species$x[8001:9000])
out_phylo_9k <- validateTaxa(phylo_species$x[9001:9478])
out_phylo_4_5k <- validateTaxa(phylo_species$x[4001:5000])
out_phylo_5_6k <- validateTaxa(phylo_species$x[5001:6000])
out_phylo_6_7k <- validateTaxa(phylo_species$x[6001:7000])
out_phylo_7_8k <- validateTaxa(phylo_species$x[7001:8000])
out_phylo_8_9k <- validateTaxa(phylo_species$x[8001:9000])
out_phylo_9k <- validateTaxa(phylo_species$x[9001:9478])
save.image("C:/Users/dillj/OneDrive - San Diego State University (SDSU.EDU)/Research/EcoGeoEvo/EcoGeoEvo/taxa_validation.RData")
View(phylo_species)
View(out_phylo_8_9k)
View(out_phylo_8_9k[[2]])
View(out_phylo_7_8k)
out_phylo_7_8k[[2]]
View(phylo_species)
validateTaxa <- function(taxa){
#using taxize to clean the scientific names and merge
syntaxa  <- taxize::synonyms(taxa, db = "eol", rows = 1)
df_na <- ""
df_tax <- data.frame(sub_tsn=character(),acc_name=character(),
acc_tsn=character(),acc_author=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
df_syn <- data.frame(sub_tsn =character(),acc_tsn=character(),
syn_author=character(),syn_name=character(),syn_tsn=character())
for(i in 1:length(syntaxa)){
if(i==1){bool = 0}
if(is.na(syntaxa[i])){
#vector of species not found in ITIS
df_na[length(df_na)+1] <- names(syntaxa[1])
}else{
temp <- data.frame(syntaxa[i])
if(ncol(temp) == 7){
print('here')
if(bool == 0){
#needed to make temp and change names because each df has unique column headers
df_tax_temp = temp
names(df_tax_temp) = c('sub_tsn','acc_name','acc_tsn','acc_author','syn_author','syn_name','syn_tsn')
}
else{df_tax <- rbind(df_tax,setNames(temp,names(df_tax_temp)))}
bool = bool + 1
}else{
#logic for species found. Currently have logic for correct name but with synonyms. No code present for
#correct name but no synonyms (returns 0col/0row dataframe)
#df_syn_temp = temp
#names(df_syn_temp) = c('sub_tsn','acc_tsn','syn_author','syn_name','syn_tsn')
#df_syn <- rbind(df_syn,setNames(temp,names(df_syn_temp)))
}
}
}
names(df_tax)[6] = 'species'
return(list(df_syn,df_tax,df_na))
}
test <- validateTaxa(phylo_species[1:1000])
test <- validateTaxa(phylo_species[,1:1000])
test <- validateTaxa(phylo_species[1:1000,])
?taxize
?taxize::synonyms
test< - taxize::synonyms(phylo_sepcies[1:1000,], db = "eol")
test<- taxize::synonyms(phylo_sepcies[1:1000,], db = "eol")
test<- taxize::synonyms(phylo_species[1:1000,], db = "eol")
